# -*- coding: utf-8 -*-
"""audio module.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dRLP1krBu3xr2en_1d10wAAZgER0aVJF
"""

import librosa
import tensorflow as tf
import tensorflow.keras as keras
import numpy as np
import random
import os
from flask import Flask, request, jsonify

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

MODEL_PATH = '/content/drive/MyDrive/tardigradeaudiomodel.h5'
NUM_SAMPLES_TO_CONSIDER = 22050

class _Keyword_Spotting_Service:
  model = None
  _mappings = [
        "bed",
        "bird",
        "cat",
        "dog",
        "go",
        "happy",
        "nine",
        "off",
        "stop",
        "tree"
    ]
  _instance = None


  def predict(self, file_path):
    #extract MFCCs 
    MFCCs = self.preprocess(file_path)

    #convert 2d MFCCs array into 4d array
    MFCCs = MFCCs[np.newaxis, ..., np.newaxis]

    #make prediction
    prediction = self.model.predict(MFCCs)
    predicted_index = np.argmax(prediction)
    predicted_keyword = self._mappings[predicted_index]

    return predicted_keyword

  def preprocess(self, file_path, n_mfcc=13, n_fft=2048, hop_length=512):
    #load audio file
    signal, sr = librosa.load(file_path)

    #ensure consistency in the audio file length
    if len(signal) > NUM_SAMPLES_TO_CONSIDER:
      signal = signal[:NUM_SAMPLES_TO_CONSIDER]

    #extract MFCCs
    MFCCs = librosa.feature.mfcc(signal, n_mfcc=n_mfcc, n_fft=n_fft, hop_length=hop_length)

    return MFCCs.T

def Keyword_Spotting_Service():
  if _Keyword_Spotting_Service._instance is None:
    _Keyword_Spotting_Service._instance = _Keyword_Spotting_Service()
    _Keyword_Spotting_Service.model = keras.models.load_model(MODEL_PATH)
  return _Keyword_Spotting_Service._instance


if __name__ == "__main__":
  kss = Keyword_Spotting_Service()
  keyword = kss.predict('/content/drive/MyDrive/yolandatest/bed2.wav')

  print(f"Predicted Keywords: {keyword}")

app = Flask (__name__)

@app.route("/predict", methods=["POST"])

def predict():
  #ini untuk audio file dan nyimpannya
  audio_file = request.files["file"]
  file_name = str(random.randit(0, 100000))
  audio_file.save(file_name)

  #invoke keyword spotting service
  kss = Keyword_Spotting_Service()

  #make a prediction
  predicted_keyword = kss.predict(file_name)

  #remove the audio file
  os.remove(file_name)
            
  #send back the predicted keyword in json format
  data = {"keyword": predicted_keyword}
  return jsonify(data)

if __name__ == "__main__":
  app.run(debug=False)